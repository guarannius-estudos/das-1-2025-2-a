Aula 06/10/2025

Definição das características da arquitetura
- Devem ser:
  * Fora do domínio do problema.
  * Influenciar a estrutura do design.
  * Essenciais para o sucesso da aplicação.
- Direcionam decisões arquiteturais.
- Impactam diretamente a qualidade e viabilidade do sistema.

Categorias de Características da Arquitetura
- Operacionais:
  * Disponibilidade            * Tempo que o sistema deve ficar ativo.
  * Desempenho                 * Tempo de resposta, testes de estresse, picos.
  * Escalabilidade             * Suportar aumento de usuários/dados.
  * Confiabilidade             * Funcionar mesmo sob falhas.
  * Recuperabilidade           * Tempo de recuperação após falha.
  * Robustez                   * Lidar com erros e falhas externas.
- Estruturais:
  * Manutenção                 * Facilidade de alteração/melhoria.
  * Portabilidade              * Rodar em diferentes plataformas.
  * Reutilização               * Uso de componentes em outros projetos.
  * Atualização                * Facilidade de atualizar versões.
  * Instalação                 * Facilidade de instalar em diferentes ambientes.
- Transversais:
  * Segurança                  * Criptografia, controle de acesso.
  * Privacidade                * Proteção contra acessos internos indevidos.
  * Autenticação e Autorização * Identificar e limitar acesso.
  * Acessibilidade             * Inclusão de usuários com deficiência.
  * Legalidade                 * Conformidade com leis e regulamentos.
  * Usabilidade                * Facilidade de uso e aprendizado.
  * Armazenamento              * Políticas de retenção de dados.

Características Explícitas vs. Implícitas
- Explícitas:
  * Aparecem nos requisitos.
- Implícitas:
  * São essenciais, mas raramente documentadas.

Definições ISO
- Eficiência do desempenho:
  * Recursos vs. resposta.
- Compatibilidade:
  * Integração com outros sistemas.
- Confiabilidade:
  * Estabilidade e tolerância a falhas.
- Segurança:
  * Proteção dos dados e rastreabilidade.
- Manutenibilidade:
  * Facilidade de modificar e testar.
- Portabilidade:
  * Adaptação a diferentes ambientes.
- Usabilidade:
  * Facilidade de uso e acessibilidade.

Aula 29/09/2025
https://learn.microsoft.com/pt-br/azure/architecture/patterns/circuit-breaker?wt.mc_id=AZ-MVP-5003638

Circuit Breaker
- A idéia é protejer o sistema como um disjuntor, bloqueia temporariamente o acesso a um serviço depois de detectar alguma falha.
- Impede repetidas tentativas malsucedidas para que o sistema possa se recuperar efetivamente.
- Melhora a estabilidade e a resiliência de um sistema.
- Estados de um circuit Breaker:
  * Closed - Quando não há falhas o circuit Breaker está fechado.
  * Open - Quando acontece uma falha o circuit Breaker abre, ou seja, aconteceu uma falha.
  * Half-Open - Sistema fechado, porém em alerta, necessita atenção.

Aula 02/09/2025 e 08/09/2025

Diferençca entre Arquitetura e Design:
- Arquitetura define a estrutura do software e os padrões que ele vai seguir.
- Design é a parte de como essa estrutura vai ser implementada.

Como é a formação do conhecimento de um arquiteto modelo T?
- Vale mais ter uma amplitude maior de conhecimento do que a especialização em um único tema.
- Saber mais de um panorama geral ajuda a tomar decisões melhores para cada situação.

Trade-Off
- Não existe resposta certa ou errada, apenas decisões baseadas em trade-offs.
- O arquiteto deve analisar os prós e contras de cada opção e escolher a melhor para a situação.
  
  Cenário: Sistema de leilão
  - Serviço Quem dá o lance gera e envia o valor do lance para três serviços:
    * Capturar lance
    * Rastrear lance
    * Analisar lance

  - Opções de comunicação entre serviços
    * Uso de Tópicos (modelo um para muitos)
      - Serviço conecta-se a um único tópico.
      - Novos serviços podem ser adicionados sem alterar os serviços existentes.
      - Entrega a mensagem uma vez e todos recebem.

    * Uso de Filas (modelo um para um)
      - Serviço precisa conectar-se a múltiplas filas.
      - Para adicionar um novo serviço é necessário criar uma nova fila e modificar o serviço para enviar mensagens para essa nova fila.
      - Entrega a mensagem individualmente para cada um.

Aula 26/08/2025 e 01/09/2025
https://learn.microsoft.com/pt-br/training/modules/introduction-to-devops/2-what-is-devops?ns-enrollment-type=learningpath&ns-enrollment-id=learn.wwl.az-400-work-git-for-enterprise-devops

Características da arquitetura:
- Requisitos não funcionais. (Impossível atender todos os requisitos)

Decisões da arquitetura:
- Definir a estrutura do sistema.

Princípios do design:
- Definir os princípios para construir o sistema.

Arquiteto:
- Orienta a equipe.
- Mantém o padrão do projeto.
- Analisa as mudanças do sistema.
- Toma as decisões difíceis.

Aula 05/08/2025, 11/08/2025 e 12/08/2025
https://engsoftmoderna.info/cap5.html
https://engsoftmoderna.info/cap6.html

SOLID:
- Usar a orientação a objetos da maneira correta.
  S - Classe com responsabilidade única.
  O - Uma classe deve estar fechada para modificações e aberta para extensões.
  L - Trocar uma chamada de uma classe filho por outra classe filho mantém a funcionalidade do código.
  I - Uso de interface para comunicação entre as classes. Evita comunicação direta entre elas.
  D - Classe deve depender de uma abstração e não de implementação concreta. (Controller -> <<Interface>> -> Service)
      - Evitar extends entre classe pai e filho onde a classe filho pode assumir o papel de outra classe filho.
      - O método deve usar somente os seguintes métodos: de sua própria classe, de objetos passados como parâmetros, de objetos criados pelo próprio método, de atributos do próprio método. (Não usar variáveis globais)

Aula 04/08/2025
https://engsoftmoderna.info/cap5.html

Abstração:
- Representação de uma entidade de maneira simplificada.

Ocultamento de informação:
- Privar variáveis para proteção. Usado getter e setter para acessá-los em outros lugares.

Coesão:
- Faz uma funcionalidade bem feita. Facilitando a leitura e ajudando no manuseio do código.

Acoplamento:
- Força da conexão entre duas classes. Caso mexa em um código de A, pode afetar o código de B. (Herança, Implementação, Associação).
